{"version":3,"file":"static/js/896.b577aaa7.chunk.js","mappings":"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","sources":["Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.js","hoc/withAuthNavigare.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Message = (props) => {\r\n    return <div>{props.message}</div>\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport Message from './Message/Message'\r\nimport Button from '@mui/material/Button'\r\nimport { useFormik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport Box from '@mui/material/Box'\r\nimport TextField from '@mui/material/TextField'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogActions from '@mui/material/DialogActions'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport List from '@mui/material/List'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\r\nimport ListItemText from '@mui/material/ListItemText'\r\nimport PersonIcon from '@mui/icons-material/Person'\r\nimport Grid from '@mui/material/Grid'\r\n\r\nconst validationSchema = yup.object({\r\n    newMessageBody: yup\r\n        .string('Enter your message')\r\n        .required('Message is required')\r\n})\r\n\r\nconst Dialogs = (props) => {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const state = props.dialogsPage\r\n\r\n    const dialogElements =\r\n        state.dialogs.map(d =>\r\n            <ListItem button onClick={handleClickOpen} key={d.name}>\r\n                <ListItemAvatar>\r\n                    <Avatar sx={{ bgcolor: '#004D40', color: '#004D40'[600] }}>\r\n                        <PersonIcon />\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={d.name} />\r\n            </ListItem>\r\n        )\r\n\r\n    const messagesElement =\r\n        state.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />)\r\n\r\n    const addNewMassage = (values, { resetForm }) => {\r\n        props.sendMessage(values.newMessageBody)\r\n        resetForm({ newMessageBody: '' })\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessageBody: ''\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: addNewMassage\r\n    })\r\n\r\n    return (\r\n\r\n        <Box sx={{ padding: '30px', flexGrow: 1, backgroundColor:'white' }}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} md={4}>\r\n                    <List>{dialogElements}</List>\r\n                </Grid>\r\n                <Grid item md={8}>\r\n                    <Box sx={{ paddingTop: '23px' }} > {messagesElement} </Box>\r\n                    <Box component='form'\r\n                        noValidate\r\n                        onSubmit={formik.handleSubmit}\r\n                        sx={{ mt: 1 }}>\r\n                        <TextField margin='normal'\r\n                        color='secondary'\r\n                            fullWidth\r\n                            id='newMessageBody'\r\n                            label='Your message'\r\n                            name='newMessageBody'\r\n                            autoComplete='newMessageBody'\r\n                            autoFocus\r\n                            value={formik.values.newMessageBody}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.newMessageBody && Boolean(formik.errors.newMessageBody)}\r\n                            helperText={formik.touched.newMessageBody && formik.errors.newMessageBody}\r\n                        />\r\n                        <Button color='secondary' variant='contained' type='submit' >Send</Button>\r\n                    </Box>\r\n                </Grid>\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                >\r\n                    <DialogTitle>\r\n                        Coming soon\r\n                    </DialogTitle>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>\r\n                            Ok\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import React from \"react\";\r\nimport { updateNewMessageBodyCreator } from \"../../Redux/dialogs-reducer\";\r\nimport { sendMessageCreator } from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect} from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigare\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        \r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthNavigate\r\n) (Dialogs);","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsForNavigate =(state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthNavigate = (Component) => {\r\nclass NavigateComponent extends React.Component {\r\n    render () {\r\n        if (!this.props.isAuth) return <Navigate to='/login'/>;\r\n        return <Component {...this.props}/>\r\n    }\r\n}\r\n\r\nlet ConnectedAuthNavigateComponent=connect(mapStateToPropsForNavigate)(NavigateComponent)\r\n\r\nreturn ConnectedAuthNavigateComponent\r\n}"],"names":["props","message","validationSchema","yup","newMessageBody","required","React","open","setOpen","handleClickOpen","handleClose","state","dialogsPage","dialogElements","dialogs","map","d","ListItem","button","onClick","ListItemAvatar","Avatar","sx","bgcolor","color","Person","ListItemText","primary","name","messagesElement","messages","m","id","formik","useFormik","initialValues","onSubmit","values","resetForm","sendMessage","Box","padding","flexGrow","backgroundColor","Grid","container","spacing","item","xs","md","List","paddingTop","component","noValidate","handleSubmit","mt","TextField","margin","fullWidth","label","autoComplete","autoFocus","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","variant","type","Dialog","onClose","DialogTitle","DialogActions","compose","connect","dispatch","updateNewMessageBody","body","updateNewMessageBodyCreator","sendMessageCreator","withAuthNavigate","Dialogs","mapStateToPropsForNavigate","isAuth","auth","Component","NavigateComponent","this","to"],"sourceRoot":""}