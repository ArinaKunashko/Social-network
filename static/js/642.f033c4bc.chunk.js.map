{"version":3,"file":"static/js/642.f033c4bc.chunk.js","mappings":"mLACA,EAA+B,4BAA/B,EAAwE,0B,sCCSlEA,EAAoB,SAAAC,GACtB,IAAMC,EAAS,CAAC,EAShB,OARKD,EAAOE,MAGP,2CAA2CC,KAAKH,EAAOE,SAExDD,EAAOC,MAAQ,8BAJfD,EAAOC,MAAQ,iBAOZD,CAEV,EAEKG,EAA4BC,EAAAA,KAAaC,MAAM,CACjDC,SAAUF,EAAAA,KACLG,IAAI,EAAG,oCACPC,IAAI,GAAI,sCACRC,SAAS,oBA+ElB,GAAeC,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OADC,GAIgB,CAAEE,MAAAA,EAAAA,IAA1C,EA5Ec,SAACC,GAEX,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,SAAO,EAACC,GAAG,cAI5B,4BACI,sCAEA,SAAC,KAAD,CACIC,cAAe,CACXjB,MAAO,GACPK,SAAU,GACVa,YAAY,GAEhBC,SAAUtB,EACVuB,iBAAkBlB,EAElBmB,SAAU,SAACvB,EAAD,GAA2C,IAAhCwB,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAChCT,EAAMD,MAAMf,EAAOE,MAAOF,EAAOO,SAAUP,EAAOoB,WAAYK,GAC9DD,GAAc,EACjB,EAZL,SAgBK,gBAAGE,EAAH,EAAGA,QAAH,OACG,UAAC,KAAD,YAEI,qCACI,SAAC,KAAD,CACIC,KAAM,QACNC,KAAM,OACNC,YAAa,mBAEpBH,EAAQxB,OACT,0BACI,SAAC,KAAD,CAAcyB,KAAK,QAAQG,UAAU,OAAOC,UAAWC,OAG3D,wCACI,SAAC,KAAD,CACIL,KAAM,WACNC,KAAM,WACNC,YAAa,qBAEpBH,EAAQxB,OACT,0BACI,SAAC,KAAD,CAAcyB,KAAK,WAAWG,UAAU,OAAOC,UAAWC,OAG9D,kBAAMD,UAAWC,EAAjB,WACI,SAAC,KAAD,CACIJ,KAAM,WACND,KAAM,aACNM,GAAG,gBACP,kBAAOC,QAAS,aAAhB,+BAGJ,0BACI,mBACIN,KAAM,SADV,yBAlCX,MA4ChB,G","sources":["webpack://react01/./src/Components/Login/Login.module.css?2cea","Components/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"Login_errorMessage__DrCks\",\"rememberMe\":\"Login_rememberMe__Sj4hB\"};","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s from \"./Login.module.css\"\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../Redux/auth-reducer\";\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst validateLoginForm = values => {\r\n    const errors = {};\r\n    if (!values.email) {\r\n        errors.email = 'Required field';\r\n    } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Email or password is wrong';\r\n    }\r\n\r\n    return errors;\r\n\r\n};\r\n\r\nconst validationSchemaLoginForm = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        .max(20, \"Must be shorter than 20 characters\")\r\n        .required(\"Required field\")\r\n});\r\n\r\nconst Login = (props) => {\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate replace to='/profile' />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2> Login  </h2>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: \"\",\r\n                    password: \"\",\r\n                    rememberMe: false\r\n                }}\r\n                validate={validateLoginForm}\r\n                validationSchema={validationSchemaLoginForm}\r\n\r\n                onSubmit={(values, { setSubmitting, setStatus }) => {\r\n                    props.login(values.email, values.password, values.rememberMe, setStatus)\r\n                    setSubmitting(false)\r\n                }\r\n\r\n                }\r\n            >\r\n                {({ touched }) => (\r\n                    <Form>\r\n\r\n                        <div > Email\r\n                            <Field\r\n                                name={'email'}\r\n                                type={'text'}\r\n                                placeholder={'Your e-mail'} />\r\n                        </div>\r\n                        {touched.email}\r\n                        <div>\r\n                            <ErrorMessage name=\"email\" component=\"span\" className={s.errorMessage} />\r\n                        </div>\r\n\r\n                        <div> Password\r\n                            <Field\r\n                                name={'password'}\r\n                                type={'password'}\r\n                                placeholder={'Your password'} />\r\n                        </div>\r\n                        {touched.email}\r\n                        <div>\r\n                            <ErrorMessage name=\"password\" component=\"span\" className={s.errorMessage} />\r\n                        </div>\r\n\r\n                        <span className={s.rememberMe} >\r\n                            <Field\r\n                                type={'checkbox'}\r\n                                name={'rememberMe'}\r\n                                id='rememberMe' />\r\n                            <label htmlFor={'rememberMe'} > Remember me </label>\r\n                        </span>\r\n\r\n                        <div>\r\n                            <button\r\n                                type={'submit'} > Login </button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login);"],"names":["validateLoginForm","values","errors","email","test","validationSchemaLoginForm","Yup","shape","password","min","max","required","connect","state","isAuth","auth","login","props","replace","to","initialValues","rememberMe","validate","validationSchema","onSubmit","setSubmitting","setStatus","touched","name","type","placeholder","component","className","s","id","htmlFor"],"sourceRoot":""}