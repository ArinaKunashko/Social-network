{"version":3,"file":"static/js/827.af5614b9.chunk.js","mappings":"4KACA,GAAgB,QAAU,yBAAyB,SAAW,0BAA0B,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,oBAAsB,sC,mBCajO,EAToB,SAACA,GACjB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAhB,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,cAAsBD,EAAMM,KAA5B,QAGX,ECMD,GAbwBC,EAAAA,UAOR,SAACP,GACb,OAAO,0BACH,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMQ,WAEzC,G,mBCRKC,EAAyB,SAAAC,GAC3B,IAAMC,EAAS,CAAC,EAIhB,OAHKD,EAAOE,iBACRD,EAAOC,eAAiB,mBAErBD,CACV,EAEKE,EAA+BC,EAAAA,KAAaC,MAAM,CAEpDH,eAAgBE,EAAAA,KACXE,IAAI,EAAG,oCACPC,IAAI,IAAM,sCACVC,SAAS,qBAsElB,EAjEgB,SAAClB,GAEb,IAAImB,EAAQnB,EAAMoB,YAEdC,EACAF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACC,EAAD,CAAanB,KAAMkB,EAAElB,KAAiBJ,GAAIsB,EAAEtB,IAAZsB,EAAEtB,GAAtC,IAEnBwB,EACAP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,SAAC,EAAD,CAASpB,QAASoB,EAAEpB,QAAoBN,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,GAAxC,IAQxB,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,UACKiB,GAED,iBAAKlB,UAAWC,EAAAA,SAAhB,WAEI,+BAAOsB,EAAP,QAChB,0BACgB,SAAC,KAAD,CACIG,cAAe,CACXjB,eAAgB,IAEpBkB,SAjBI,SAACpB,EAAD,GAA0B,IAAhBqB,EAAe,EAAfA,UAE1B/B,EAAMgC,YAAYtB,EAAOE,gBACzBmB,EAAU,CAACnB,eAAe,IAC7B,EAceqB,SAAUxB,EACVyB,iBAAkBrB,EANtB,SASK,kBACG,SAAC,KAAD,WACI,4BAGI,gBAAKV,UAAWC,EAAAA,oBAAhB,UACI,SAAC,KAAD,CAAO+B,YAAY,qBACf7B,KAAM,iBACNI,OAAQV,EAAMY,eACdwB,KAAM,YAMd,0BACI,SAAC,KAAD,CAAc9B,KAAK,iBAAiB+B,UAAU,OAAOlC,UAAWC,EAAAA,kBAGpE,0BAAK,mBAASgC,KAAK,SAAd,0BAnBhB,WA6BpB,E,8BC1DD,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KApBkB,SAACpB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAG1B,IAEwB,SAACoB,GACtB,MAAO,CACHC,qBAAsB,SAACC,GACnBF,GAASG,EAAAA,EAAAA,IAA4BD,GACxC,EACDV,YAAa,SAACpB,GACV4B,GAASI,EAAAA,EAAAA,IAAmBhC,GAC/B,EAER,IAKGiC,EAAAA,EAFJ,CAGGC,E,mJC5BCC,EAA4B,SAAC5B,GAAD,MAAY,CACxC6B,OAAQ7B,EAAM8B,KAAKD,OADS,EAInBH,EAAmB,SAACK,GAAe,IAC1CC,EADyC,0IAE3C,WACI,OAAKC,KAAKpD,MAAMgD,QACT,SAACE,GAAD,UAAeE,KAAKpD,SADI,SAAC,KAAD,CAAUK,GAAG,UAE/C,KAL0C,GACfE,EAAAA,WAShC,OAFmCgC,EAAAA,EAAAA,IAAQQ,EAARR,CAAoCY,EAGtE,C","sources":["webpack://react01/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.js","hoc/withAuthNavigare.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__jwMoZ\",\"messages\":\"Dialogs_messages__HewAg\",\"message\":\"Dialogs_message__jSGgt\",\"dialogs\":\"Dialogs_dialogs__ii6ke\",\"errorMessage\":\"Dialogs_errorMessage__0wZBR\",\"fieldNewMessageBody\":\"Dialogs_fieldNewMessageBody__1E9vg\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nconst DialogItems = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} > {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItems;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\nlet newMassageElement = React.createRef;\r\nlet addMessage = () => {\r\n    let text = newMassageElement.current.value;\r\n    alert(text)\r\n    \r\n}\r\n\r\nconst Message = (props) => {\r\n    return <div>\r\n        <div className={s.dialogs}>{props.message}</div>\r\n    </div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Navigate, NavLink } from \"react-router-dom\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItems from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst validateNewMessageText = values => {\r\n    const errors = {};\r\n    if (!values.newMessageBody) {\r\n        errors.newMessageBody = \"Write something\";\r\n    }\r\n    return errors;\r\n};\r\n\r\nconst validateSchemaNewMessageText = Yup.object().shape({\r\n\r\n    newMessageBody: Yup.string()\r\n        .min(1, \"Must be longer than 2 characters\")\r\n        .max(1000, \"Must be shorter than 10 characters\")\r\n        .required(\"Write something\")\r\n});\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogElements =\r\n        state.dialogs.map(d => <DialogItems name={d.name} key={d.id} id={d.id} />)\r\n\r\n    let messagesElement =\r\n        state.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />)\r\n        \r\n\r\n    let addNewMassage = (values, {resetForm}) => {\r\n        \r\n        props.sendMessage(values.newMessageBody)\r\n        resetForm({newMessageBody:''})\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            {dialogElements}\r\n\r\n            <div className={s.messages}>\r\n\r\n                <div> {messagesElement} </div>\r\n<div>\r\n                <Formik\r\n                    initialValues={{\r\n                        newMessageBody: \"\"\r\n                    }}\r\n                    onSubmit={addNewMassage}\r\n                    validate={validateNewMessageText}\r\n                    validationSchema={validateSchemaNewMessageText}\r\n                >\r\n\r\n                    {() => (\r\n                        <Form>\r\n                            <div>\r\n\r\n\r\n                                <div className={s.fieldNewMessageBody}>\r\n                                    <Field placeholder=\"Enter your message\"\r\n                                        name={'newMessageBody'}\r\n                                        values={props.newMessageBody}\r\n                                        type={'text'}\r\n                                       \r\n\r\n                                    />\r\n\r\n                                </div>\r\n                                <div>\r\n                                    <ErrorMessage name=\"newMessageBody\" component=\"span\" className={s.errorMessage} />\r\n                                </div>\r\n\r\n                                <div><button  type='submit'> Send </button></div>\r\n                            </div> \r\n\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { updateNewMessageBodyCreator } from \"../../Redux/dialogs-reducer\";\r\nimport { sendMessageCreator } from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect} from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigare\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        \r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthNavigate\r\n) (Dialogs);","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForNavigate =(state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthNavigate = (Component) => {\r\nclass NavigateComponent extends React.Component {\r\n    render () {\r\n        if (!this.props.isAuth) return <Navigate to=\"/login\"/>;\r\n        return <Component {...this.props}/>\r\n    }\r\n}\r\n\r\nlet ConnectedAuthNavigateComponent=connect(mapStateToPropsForNavigate)(NavigateComponent)\r\n\r\nreturn ConnectedAuthNavigateComponent;\r\n}"],"names":["props","path","id","className","s","to","name","React","message","validateNewMessageText","values","errors","newMessageBody","validateSchemaNewMessageText","Yup","shape","min","max","required","state","dialogsPage","dialogElements","dialogs","map","d","DialogItem","messagesElement","messages","m","initialValues","onSubmit","resetForm","sendMessage","validate","validationSchema","placeholder","type","component","compose","connect","dispatch","updateNewMessageBody","body","updateNewMessageBodyCreator","sendMessageCreator","withAuthNavigate","Dialogs","mapStateToPropsForNavigate","isAuth","auth","Component","NavigateComponent","this"],"sourceRoot":""}